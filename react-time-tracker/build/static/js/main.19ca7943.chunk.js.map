{"version":3,"sources":["NavBar.js","InputAlert.js","AddShift.js","ShiftCollection.js","CurrShift.js","CurrShiftList.js","Header.js","Dashboard.js","App.js","reportWebVitals.js","redux/reducers.js","redux/store.js","index.js"],"names":["NavBar","className","type","id","href","InputAlert","msg","persistence","alertId","Math","random","setTimeout","document","getElementById","remove","AddShift","useState","category","formData","setFormData","inputAlerts","setInputAlerts","handleChange","evt","target","name","value","data","onSubmit","preventDefault","alerts","htmlFor","onChange","placeholder","persistance","Shift","start","end","Date","this","getTime","duration","specificity","durationFormatted","timeFormat","test","strict","splitDateTime","newShift","clockOut","ms","MSINHOUR","MSINDAY","MSINMONTH","MSINYEAR","result","i","y","floor","mth","d","h","min","s","CurrShift","shift","hours","getHours","CurrShiftList","currShiftCollection","useSelector","shifts","filter","map","Header","Dashboard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","combineReducers","state","action","payload","equals","persistConfig","key","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","root","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistedStore","persistStore","index","StrictMode","loading","persistor","ReactDOM","render"],"mappings":"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","file":"static/js/main.19ca7943.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = () => {\n    return (\n        <div className=\"navbar navbar-expand-sm navbar-dark bg-primary\">\n            <span className=\"navbar-brand px-4\">Time Traker <i className=\"fas fa-chart-line fa-md\"></i></span>\n\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navLinks\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse navbar-nav text-center justify-content-between mx-3\" id=\"navLinks\">\n\n                <a href=\"index.html\" className=\"nav-item nav-link active\">Dashboard</a>\n                {/* <!-- <a href=\"#\" class=\"nav-item nav-link \">Modify Shifts</a>\n                <a href=\"#\" class=\"nav-item nav-link\">Set Goals</a> --> */}\n                {/* <!-- <a href=\"all-hours.html\" class=\"nav-item nav-link\">See Stats</a> --> */}\n\n            </div>\n        </div>\n    )\n};\n\nexport default NavBar\n","import React from \"react\";\nconst InputAlert = ({ msg, persistence = 0 }) => {\n\n    const alertId = Math.random() + '-alert';\n\n    if(+persistence > 0){\n        setTimeout(() => {\n            document.getElementById(alertId).remove();\n        }, +persistence);\n    }\n\n    return (\n    <div className=\"alert bg-warning\" id={alertId}>\n        { msg }\n    </div>\n)};\nexport default InputAlert\n","import React, { useState } from \"react\";\nimport InputAlert from \"./InputAlert\";\nconst AddShift = () => {\n    const INIT = {type: \"\", category: \"\"};\n    const [ formData, setFormData ] = useState(INIT);\n    const [ inputAlerts, setInputAlerts ] = useState({});\n\n    function handleChange(evt) {\n        const { name, value } = evt.target;\n        setFormData(data => ({...data, [name]: value}));\n    }\n    function handleSubmit(evt) {\n        evt.preventDefault();\n        setInputAlerts(alerts => ({ ...alerts, type: \"Input Must be filled\", category: \"Input Must be filled\"}));\n    }\n\n    return (\n        <form id=\"new-shift\" className=\"col-xl border m-3 p-4 rounded shadow \" onSubmit={handleSubmit}>\n            <div className=\"row align-items-center justify-content-around\">\n                <h1 className=\"col-lg-3 col-xl-12 display-4 text-center\">New Shift!</h1>\n\n                <div className=\"col-12 col-lg-2 col-xl-5 m-2 mb-3\">\n                    <label htmlFor=\"type\" className=\"form-label\">Work-Type</label>\n                    <div className=\"input-group\">\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"type\" \n                            name=\"type\"\n                            value={formData.type}\n                            onChange={handleChange}\n                            placeholder=\"Coding\" \n                        />\n                        {inputAlerts.type ? <InputAlert msg={inputAlerts.type} persistance={2500} /> : null}\n                    </div>\n                </div>\n                <div className=\" col-lg-3 col-xl-5 m-2 mb-3\">\n                    <label htmlFor=\"category\" className=\"form-label\">Category</label>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">For </span>\n                        </div>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"category\" \n                            name=\"category\"\n                            value={formData.category}\n                            onChange={handleChange}\n                            placeholder=\"Fun\" />\n                        {inputAlerts.category ? <InputAlert msg={inputAlerts.category} persistance={2500}/> : null}\n\n                    </div>\n                </div>\n\n                <div id=\"clockin-buttons\" className=\"col m-2 mb-3\">\n                    <button type=\"submit\" className=\"btn btn-secondary col-12 p-3 px-md-5 \">Clock In</button>\n                </div>\n            </div>\n        </form>\n    )\n};\nexport default AddShift","/**\n * A shift class, representing time spent at a certain date on a thing for a reason\n * \n */\nclass Shift {\n    /**\n     * \n     * @param { Date } start \n     * @param { string } type \n     * @param { string } category  \n     * @param { Date } end\n     */\n    constructor(start, type, category, end) {\n        if (start instanceof Date) this.start = start;\n        else this.start = new Date(start);\n\n        this.type = type;\n        this.category = category;\n        if (end) {\n            if (end instanceof Date) this.end = end;\n            else this.end = new Date(end);\n        }\n    }\n\n    /**\n     * returns the duration in Milliseconds\n     */\n    duration() {\n        if (this.end) return this.end.getTime() - this.start.getTime();\n        else return new Date().getTime() - this.start.getTime();\n    }\n\n    /**\n    * returns the hours as a decimal that the shift took to complete\n    */\n    getHours() {\n        return this.duration() / 3600000 //MS in an Hour\n    }\n\n    getFormattedDuration(specificity = 2) {\n        const duration = this.duration();\n        const durationFormatted = timeFormat(duration, specificity);\n        return durationFormatted;\n    }\n    equals(test, strict=true) {\n        if (this.category === test.category) {\n            if (this.type === test.type) {\n                if (this.start === test.start) return true;\n                if (!strict) return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * sets the end of the shift\n     *\n     * @param { Date } end the end Date/Time that this shift should end, if none\n     *          specified it defaults to now.\n     */\n    clockOut(end = new Date()) {\n        this.end = end;\n    }\n\n    /**\n     * ends the currents shift at splitDateTime and starts a new shift \n     *      at the same moment of the specified type and category\n     * \n     * @param { Date } splitDateTime the time to clock out the original shift\n     * @param { String } type the type that the newshift should take on \n     * @param { String } category the category the newshift take on, the same category if none specified\n     * @returns { Shift } returns the newly created shift \n     */\n    splitShift(splitDateTime, type, category = this.category) {\n        const newShift = new Shift(splitDateTime, type, category, this.end)\n        this.clockOut(splitDateTime);\n        return newShift;\n    }\n\n}\n\n\nclass ShiftCollection {\n    constructor(...newShifts) {\n        this.shifts = [];\n        this.add(...newShifts);\n    }\n\n    toString() {\n        return 'A ShiftCollection of length ' + this.length() + ' ' + this.shifts;\n    }\n    //future add with shifts being an object of objects of arrays\n    // tempState = { ...state };\n    // category = action.payload.category;\n    // type = action.payload.type;\n    // if(tempState[category]) {\n    //     if (tempState[category][type]) {\n    //         let temp = tempState[category][type];\n    //         tempState[category][type] = [...temp, action.payload];\n    //     } else {\n    //         tempState[category][type] = [action.payload];\n    //     }\n    // } else {\n    // tempState[category] = { [type]: [action.payload] };\n    add(...newShifts) {\n        for (let shift of newShifts) {\n            if (!(shift instanceof Shift)) {\n                shift = new Shift(shift.start, shift.type, shift.category, shift.end);\n            }\n            const type = shift.type;\n            const category = shift.category;\n\n\n            this.shifts.push(shift);\n\n        }\n    }\n    getTotalHours() {\n        return this.shifts.reduce((totalHours, shift) => {\n            return totalHours + shift.getHours();\n        }, 0);\n    }\n\n    remove(removedShift) {\n        const shiftIndex = this.shifts.findIndex((shift) => {\n            if (shift.category === removedShift.category)\n                if (shift.type === removedShift.type)\n                    if (shift.start === removedShift.start) return true;\n            return false;\n        });\n\n        if (shiftIndex !== -1) {\n            this.shifts.splice(shiftIndex, 1);\n            return true;\n        }\n        else return false;\n    }\n\n    contains(someShift, strict = false) {\n        if (this.find(someShift, strict)) return true;\n        return false;\n    }\n    /**\n     * \n     * @param {string} initialCategory the initial category name to select the shifts\n     * @param {string} newCategory the name all shifts selected should be changed to\n     * @returns {boolean} true on success, false if no shifts of category initialCategory are found\n     */\n    changeCategory(initialCategory, newCategory) {\n        const shifts = this.category(initialCategory).shifts; //shift collection is returned, get the array out of it\n\n        if (shifts.length) {\n            shifts.forEach(shift => { shift.category = newCategory });\n            return true;\n        }\n        return false;\n    }\n\n    changeType(initialtype, newType) {\n        const shifts = this.type(initialtype).shifts; //shift collection is returned, get the array out of it\n        //if it's not empty\n        if (shifts.length) {\n            shifts.forEach(shift => { shift.type = newType });\n            return true;\n        }\n        //emtpy, ogType doesn't exist\n        return false;\n    }\n\n    find(someShift, strict = false) {\n        for (let shift of this.shifts) {\n            if(shift.equals(someShift, strict)) return shift;\n        }\n        return false;\n    }\n\n    getCategories() {\n        const categories = new Set();\n        for (let shift of this.shifts) {\n            categories.add(shift.category);\n        }\n        return [...categories];\n    }\n\n    getTypes() {\n        const types = new Set();\n        for (let shift of this.shifts) {\n            types.add(shift.type);\n        }\n        return [...types];\n    }\n\n    getShiftsAfter(dateTime) {\n        return new ShiftCollection(...this.shifts\n            .filter(({ start }) => dateTime.getTime() < start.getTime()));\n    }\n    getShiftsBefore(dateTime) {\n        return new ShiftCollection(...this.shifts\n            .filter(({ start }) => dateTime.getTime() < start.getTime()));\n    }\n\n    getCurrShifts() {\n        return new ShiftCollection(...(this.shifts.filter((shift) => !shift.end)));\n    }\n\n    category(queryString) {\n        return this.filter('category', queryString);\n    }\n\n    type(queryString) {\n        return this.filter('type', queryString);\n    }\n\n    filter(field, query) {\n        const matched = this.shifts.filter(shift => shift[field] == query);\n        return new ShiftCollection(...matched);\n    }\n\n    length() { return this.shifts.length };\n}\n\n/**\n * returns a day representing x hours away from dateTime \n * \n * @param {number} hours the number of hours from dateTime you want\n * @param {Date} dateTime the dateTime you want to have a reference from(defaults to now)\n * @returns {Date} a new Date that is x hours from dateTime\n */\nfunction hoursFrom(hours, dateTime = new Date()) {\n    return new Date(dateTime.getTime() + (1000 * 60 * 60 * hours)); //1000ms * 60s * 60m * X hours\n}\n\n/**\n * returns a day representing x mins away from dateTime \n * \n * @param {number} mins the number of mins from dateTime you want\n * @param {Date} dateTime the dateTime you want to have a reference from(defaults to now)\n * @returns {Date} the Date that is x mins from dateTime\n */\nfunction minsFrom(mins, dateTime = new Date()) {\n    return new Date(dateTime.getTime() + (1000 * 60 * mins)); //1000ms * 60s * X mins\n}\n\n/**\n *\n * @param { number } ms A duration represented in Milliseconds negative values are returned as positive durations\n * @param { number } specificity How many scales of time you would like returned the biggest is always returned\n *\n */\nfunction timeFormat(ms, specificity) {\n\n    const MSINSEC = 1000;\n    const MSINMINUTE = 60000;\n    const MSINHOUR = 3600000;\n    const MSINDAY = 86400000;\n    const MSINMONTH = 2628000000;\n    const MSINYEAR = MSINMONTH * 12;\n\n\n\n    let result = '';\n    let i = 0;\n    if (ms < 0) {\n        result += '- ';\n        ms = ms * -1;\n    }\n\n    const y = Math.floor(ms / MSINYEAR);\n    if (y) {\n        i++;\n        ms = ms - (y * MSINYEAR);\n        result += y + ' years ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n\n\n    const mth = Math.floor(ms / MSINMONTH);\n    if (mth) {\n        i++;\n        ms = ms - (mth * MSINMONTH);\n        result += mth + ' Months ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n\n    const d = Math.floor(ms / MSINDAY);\n    if (d) {\n        i++;\n        ms = ms - (d * MSINDAY);\n        result += d + ' Days ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n\n    const h = Math.floor(ms / MSINHOUR);\n    if (h) {\n        i++;\n        ms = ms - (h * MSINHOUR);\n        result += h + ' Hours ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n\n    const min = Math.floor(ms / MSINMINUTE);\n    if (min) {\n        i++;\n        ms = ms - (min * MSINMINUTE);\n        result += min + ' mins ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n    const s = Math.floor(ms / MSINSEC);\n    if (s) {\n        i++;\n        ms = ms - (s * MSINSEC);\n        result += s + ' seconds ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n    /*\n    if (ms) {\n        i++;\n        result += ms + ' ms ';\n        if (i == specificity) {\n            return result;\n        }\n    }\n    */\n    return result;\n\n}\nfunction timeFormatFromHours(hrs, specificity) {\n    const ms = hrs * 3600000;\n    return timeFormat(ms, specificity);\n}\n\n//testing purposes #cleanUp\n// const deli = new ShiftCollection(...JSON.parse(localStorage.records));\n\nexport { ShiftCollection, Shift }","import React from 'react';\nimport { Shift } from './ShiftCollection';\n\nconst CurrShift = ({ shift }) => {\n    shift = new Shift(shift.start,shift.type, shift.category, shift.end);\n    const hours = shift.getHours();\n    return (\n        <div> You Have been working on <br/>\n            {shift.type} for {shift.category} <br />\n            For {hours} {hours > 1 || hours < 2 ? \"Hour\" : \"Hours\" }\n        </div>\n    )\n                    /* <!-- <li class=\"row p-3 justify-content-center\">\n                                <div class=\"col-7 text-center display-6\">\n                                    <span class=\"type\">Coding</span> for <span class=\"category\">Fun</span>\n                                </div>\n            //<button class=\"col-3 btn btn-light\">Clock Out</button>\n                                <div class=\"col-4 dropdown\">\n                                    <button class=\"btn btn-secondary dropdown-toggle text-center\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\">Clock\n                                        Out</button>\n                                    <div class=\"dropdown-menu\">\n                                        <button data-referenece=\"now\" class=\"btn\">Now</button>\n                                        <button data-referenece=\"-15\" class=\"btn\">15 Mins Ago</button>\n                                        <button class=\"btn\">At Specific time</button>\n                                    </div>\n                                </div>\n                            </li> --> */\n                    /* <!--\n                            <li class=\"row p-3 justify-content-around\">\n\n                                <div class=\"col text-center display-6\">\n                                    <span class=\"type\">Laundry</span> for <span class=\"category\">The House</span>\n                                </div>\n\n                                <button class=\"col-3 btn btn-light\">Clock Out</button>\n                            </li> --> */\n}\n\nexport default CurrShift","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CurrShift from './CurrShift';\n\nconst CurrShiftList = () => {\n    const currShiftCollection = useSelector(({ shifts }) => {\n        return shifts.filter((shift) => !shift.end);\n    });\n\n    return (\n        <div className=\"col-xl m-3 p-4 rounded shadow border\">\n            <div className=\"row align-items-center justify-content-around\">\n                <h1 className=\"display-4 text-center col-12 col-md-3 col-xl-12\">Current Shifts</h1>\n\n                <ul id=\"current-shifts\" className=\"col-12 col-md-9 col-xl-12\">\n                    {currShiftCollection.map(shift => \n                        <CurrShift key={`${shift.type}-${shift.category}`} shift={shift} />\n                    )}\n                </ul>\n            </div>\n        </div>\n     )\n}\n\nexport default CurrShiftList","import React from 'react';\nimport AddShift from './AddShift';\nimport CurrShiftList from './CurrShiftList';\nconst Header = () => {\n    \n    return (\n        <div className=\"container-fluid p-2 align-items-center justify-content-around\">\n            <div className=\"row border m-3 p-4 rounded shadow justify-content-center\">\n                <AddShift />\n                <CurrShiftList />\n                \n            </div>\n        </div>\n    )\n};\nexport default Header","import React from 'react';\nconst Dashboard = () => {\n    return (\n    <div id=\"hours-spent-dashboard\" className=\"jumbotron bg-light border m-3 p-4 rounded shadow  d-none d-md-block\" >\n        <h1 className=\"display-4 text-center col-12 col-md-3 col-xl-12\">\n            Hours Spent In Last Week\n        </h1>\n    {/* <!-- < div class=\"row \" >\n    <div class=\"col mb-3\">\n        <div class=\"display-6\">House Work - 6.45Hrs</div>\n        <div class=\"progress\">\n            <div class=\"progress-bar\" style=\"width:25%\"></div>\n        </div>\n    </div>\n        </div >\n    <div class=\"row\">\n        <div class=\"col mb-3\">\n            <div class=\"display-6\">Coding - 3.25Hrs</div>\n            <div class=\"progress\">\n                <div class=\"progress-bar bg-light\" style=\"width:20%\"></div>\n                <div class=\"progress-bar bg-info\" style=\"width:25%\"></div>\n            </div>\n        </div>\n    </div> --> */}\n  </div >\n    )\n};\nexport default Dashboard","import './App.css';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Header /> \n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ShiftCollection, Shift} from '../ShiftCollection';\nimport { combineReducers } from \"redux\";\n// EX\n// import { combineReducers } from \"redux\";\n// function planets(state = INITIAL_STATE, action) {\n//     switch (action.type) {\n//         case RESET_ALL:\n//             return { ...INITIAL_STATE };\n\n//         case LOAD_PLANET:\n//             return {\n//                 ...state,\n//                 [action.payload.id]: { ...action.payload }\n//             };\n\n//         default:\n//             return state;\n//     }\n// }\n\n\n// export default combineReducers({\n//     films,\n//     planets,\n//     people,\n// });\nconst INITIAL_STATE = [new Shift(new Date(), 'coding', 'school')];\nfunction shifts(state = INITIAL_STATE, action) {\n\n    switch (action.type) {\n        case \"START_SHIFT\":\n            return [...state.shifts, new Shift(action.payload) ];\n\n        case \"UPDATE_SHIFT\":\n            return state.map(shift => \n                shift.equals(action.payload, true) ?\n                    action.payload :\n                    shift\n                    );\n\n        default:\n            return state;\n    }\n}\nexport default combineReducers({\n    shifts\n});","import { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\nimport thunk from \"redux-thunk\";\nimport root from \"./reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\n//merges the initial state with the incoming state with a shallow merge\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    stateReconciler: autoMergeLevel2\n};\n\nconst persistedReducer = persistReducer(persistConfig, root);\n\n//the Redux Store\nexport const store = createStore(\n    persistedReducer,\n    composeWithDevTools(\n        applyMiddleware(thunk),\n    )\n);\n\n/** an object containing \n * .purge()\n *    purges state from disk and returns a promise\n * .flush()\n *    immediately writes all pending state to disk and returns a promise\n * .pause()\n *    pauses persistence\n * .persist()\n *    resumes persistence\n */\nexport const persistedStore = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport { store, persistedStore } from \"./redux/store\"\n\nconst index = (\n<React.StrictMode>\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistedStore}>\n      <App />\n    </PersistGate>\n  </Provider>\n</React.StrictMode>\n);\n\nReactDOM.render(\n  index,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}